第0章 操作系统接口
###进程和内存
exec 会替换调用它的进程的内存但是会保留它的文件描述符表。

当exec执行成功后，它并不返回到原来的调用进程，而是从ELF头中声明的入口开始，执行从文件中加载的指令。exec 接受两个参数：可执行文件名和一个字符串参数数组。
char *argv[3];
argv[0] = "echo";
argv[1] = "hello";
argv[2] = 0;
exec("/bin/echo", argv);
printf("exec error\n");



I/O 和文件描述符
代表了一个进程可以读写的被内核管理的对象，是该对象在进程表中的索引。
一个新分配的文件描述符永远都是当前进程的最小的未被使用的文件描述符。
fork 一个进程，重新打开指定文件的文件描述符，然后执行新的程序。
char *argv[2];
argv[0] = "cat";
### argv[1] = 0;
if(fork() == 0) {
    close(0);
    open("input.txt", O_RDONLY);
    exec("cat", argv);
}

cat 的本质实现
char buf[512];
int n;

for(;;){
    n = read(0, buf, sizeof buf);
    if(n == 0)
        break;
    if(n < 0){
        fprintf(2, "read error\n");
        exit();
    }
    if(write(1, buf, n) != n){
        fprintf(2, "write error\n");
        exit();
    }
}



fork 复制了文件描述符，但每一个文件当前的偏移仍然是在父子进程之间共享的
if(fork() == 0) {
    write(1, "hello ", 6);
    exit();
} else {
    wait();
    write(1, "world\n", 6);
}

dup 复制一个已有的文件描述符，返回一个指向同一个输入/输出对象的新描述符。这两个描述符共享一个文件偏移，正如被 fork 复制的文件描述符一样。
fd = dup(1);
write(1, "hello", 6);
write(fd, "world\n", 6);

2>&1 告诉 shell 给这条命令一个复制描述符1的描述符2
close(2);
dup(1);



管道
int p[2];
char *argv[2];
argv[0] = "wc";
argv[1] = 0;
pipe(p);
if(fork() == 0) {
    close(0);
    dup(p[0]);
    close(p[0]);
    close(p[1]);
    exec("/bin/wc", argv);
} else {
    write(p[1], "hello world\n", 12);
    close(p[0]);
    close(p[1]);
}
当 wc 从标准输入读取时，它实际上是从管道读取的。
如果数据没有准备好，那么对管道执行的read会一直等待，直到有数据了或者其他绑定在这个管道写端口的描述符都已经关闭了。



文件系统
open("a", O_CREATE|O_WRONGLY);
link("a", "b");
系统调用 unlink 从文件系统移除一个文件名。一个文件的 inode 和磁盘空间只有当它的链接数变为 0 的时候才会被清空，也就是没有一个文件再指向它。


fd = open("/tmp/xyz", O_CREATE|O_RDWR);
unlink("/tmp/xyz");
是创建一个临时 inode 的最佳方式，这个 inode 会在进程关闭 fd 或者退出的时候被清空。
















附录B boot loader
BIOS 会把控制权交给从引导扇区（用于引导的磁盘的第一个512字节的数据区）加载的代码。引导扇区中包含引导加载器――负责内核加载到内存中。

引导加载器的第一条指令 cli（8412）屏蔽处理器中断。

现在处理器处在模拟 Intel 8088 的实模式下，有8个16位通用寄存器可用，但实际上处理器发送给内存的是20位的地址。这时，多出来的4位其实是由段寄存器%cs, %ds, %es, %ss提供的。
内存引用中其实隐含地使用了段寄存器的值：取指会用到 %cs（code segment），读写数据会用到 %ds（data segment），读写栈会用到 %ss（stack segment）。
The relationship between logical, linear and physical addresses:
CPU -> selector or offset (logical address) -> segment translation -> linear address -> page translation -> physical address -> RAM

BIOS 完成工作后，%ds, %es, %ss 的值是未知的，所以在屏蔽中断后，引导加载器的第一个工作就是将 %ax 置零，然后把这个零值拷贝到三个段寄存器中

对于使用内存超过65536字节的程序而言，实模式的16位寄存器和段寄存器就显得非常困窘了，显然更不可能使用超过 1M 字节的内存。
保护模式下可以使用更多位的地址，xv6 引导程序依次允许了保护模式和32位模式。

在保护模式下，段寄存器保存着段描述符表的索引
每一个表项都指定了一个基物理地址，最大虚拟地址（称为限制），以及该段的权限位。
这些权限位在保护模式下起着保护作用，内核可以根据它们来保证一个程序只使用属于自己的内存。

xv6 几乎没有使用段。引导加载器将段描述符表 gdt 中的每个段的基址都置零，并让所有段都有相同的内存限制（4G字节）

bootloader 执行 lgdt 指令来把指向 gdt 的指针 gdtdesc 加载到全局描述符表（GDT）寄存器中。
bootloader 将 %cr0 中的 CR0_PE 位置为1，从而开启保护模式。允许保护模式并不会马上改变处理器把逻辑地址翻译成物理地址的过程；只有当某个段寄存器加载了一个新的值，然后处理器通过这个值读取 GDT 的一项从而改变了内部的段设置。
所以使用了一个 ljmp 指令

bootloader 首先用 SEG_KDATA 初始化了数据段寄存器。




